{"version":3,"sources":["config.js","components/pixel.tsx","components/image.tsx","components/button.tsx","components/title.tsx","components/sort-controls.tsx","library/sorting/sort-color-by-priority.ts","library/sorting/sort-color-grid.ts","hooks/use-sorting.ts","components/image-container.tsx","components/header.tsx","components/content.tsx","components/footer.tsx","components/layout.tsx","application.js","reportWebVitals.js","index.js"],"names":["pixelSize","Pixel","styled","div","attrs","style","backgroundImage","colors","reduce","backgroundString","color","index","colorString","string","ImageGrid","Image","colorGroups","chunk","map","group","Button","button","active","Title","h1","OuterContainer","InnerContainer","ul","SortControls","title","sortPriority","toggleCharacteristic","isActive","characteristic","some","value","onClick","characteristics","hue","firstColor","secondColor","saturationv","saturationl","luminosity","red","green","blue","cyan","magenta","yellow","black","contrast","chroma","distance","Math","sqrt","pow","sortColorByPriority","priority","length","difference","sortColorGrid","values","sortFull","sortRows","sortColumns","callback","sortedValues","sort","rows","sortedRows","row","columns","sortedColumns","column","final","flatten","useSorting","useState","sortedColors","setSortedColors","useEffect","timer","setTimeout","clearTimeout","JSON","stringify","Container","ImageContainer","redIndex","greenIndex","blueIndex","push","Color","rgb","setSortFull","setSortRows","setSortColumns","toggleSort","updateSort","filter","header","Header","Content","main","Footer","footer","Layout","children","Application","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa07275e.chunk.js","sourcesContent":["export const pixelSize = '3px';","import Color from \"color\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { pixelSize } from \"../config\";\r\n\r\ninterface PixelProps {\r\n\tcolors: Color[];\r\n}\r\n\r\n// Each 'pixel' displays 4 colours in a row in order to reduce the number of components being rendered\r\n// This is achieved by using background image and adding a solid colour 'gradient' for each colour\r\n// (background image doesn't allow solid colour naturally) and each colour covers 25% of the background\r\n\r\nconst Pixel = styled.div.attrs<PixelProps>(({ colors }) => ({\r\n\tstyle: {\r\n\t\tbackgroundImage: colors.reduce((backgroundString, color, index) => {\r\n\t\t\tconst colorString = color.string();\r\n\t\t\treturn `${backgroundString}linear-gradient(0deg, ${colorString} 0%, ${colorString} 100%)${\r\n\t\t\t\tindex !== 3 ? \",\" : \"\"\r\n\t\t\t}`;\r\n\t\t}, \"\"),\r\n\t},\r\n}))<PixelProps>`\r\n\twidth: calc(${pixelSize} * 4);\r\n\theight: ${pixelSize};\r\n\tbackground-repeat: no-repeat;\r\n\tbackground-size: 25%, 50%, 75%, 100%;\r\n`;\r\n\r\nexport default Pixel;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Color from \"color\";\r\n\r\nimport Pixel from \"./pixel\";\r\nimport { pixelSize } from \"../config\";\r\nimport { chunk } from \"lodash\";\r\n\r\nconst ImageGrid = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: repeat(64, calc(${pixelSize} * 4));\r\n`;\r\n\r\ninterface ImageProps {\r\n\tcolors?: Array<Color>;\r\n}\r\n\r\nconst Image = ({ colors = [] }: ImageProps) => {\r\n\tconst colorGroups = chunk(colors, 4);\r\n\treturn (\r\n\t\t<ImageGrid>\r\n\t\t\t{colorGroups.map((group) => {\r\n\t\t\t\tconst colorString = group.reduce(\r\n\t\t\t\t\t(colorString, color) => `${colorString}${color.string()}`,\r\n\t\t\t\t\t\"\"\r\n\t\t\t\t);\r\n\t\t\t\treturn <Pixel colors={group} key={colorString} />;\r\n\t\t\t})}\r\n\t\t</ImageGrid>\r\n\t);\r\n};\r\n\r\nexport default Image;\r\n","import styled from \"styled-components\";\r\n\r\ninterface ButtonProps {\r\n\tactive: boolean;\r\n}\r\n\r\nconst Button = styled.button`\r\n\tbackground-color: ${({ active = false }: ButtonProps) =>\r\n\t\tactive ? \"#282828\" : \"#cccccc\"};\r\n\tcolor: #ebebeb;\r\n\tborder: none;\r\n\tpadding: 10px;\r\n\tmargin: 10px;\r\n\tborder-radius: 3px;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: #ebebeb;\r\n\t\tcolor: #282828;\r\n\t}\r\n`;\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\n\r\nconst Title = styled.h1`\r\n\tcolor: #282828;\r\n\tfont-size: 3rem;\r\n`;\r\nexport default Title;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Button from \"./button\";\r\nimport Title from \"./title\";\r\nimport { Characteristic } from \"../library/sorting/sort-color-by-priority\";\r\n\r\nconst OuterContainer = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n`;\r\n\r\nconst InnerContainer = styled.ul`\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n\talign-items: center;\r\n\tjustify-content: space-around;\r\n\tlist-style-type: none;\r\n\tmargin: 0;\r\n\tpadding: 20px;\r\n\twidth: 100%;\r\n`;\r\n\r\ninterface SortControlProps {\r\n\ttitle?: string;\r\n\tsortPriority: Array<Characteristic>;\r\n\ttoggleCharacteristic: (arg: Characteristic) => void;\r\n}\r\n\r\nconst SortControls = ({\r\n\ttitle = \"\",\r\n\tsortPriority,\r\n\ttoggleCharacteristic,\r\n}: SortControlProps) => {\r\n\tconst isActive = (characteristic: Characteristic) =>\r\n\t\tsortPriority.some((value) => value === characteristic);\r\n\r\n\treturn (\r\n\t\t<OuterContainer>\r\n\t\t\t<Title>{title}</Title>\r\n\t\t\t<InnerContainer>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tactive={isActive(\"chroma\")}\r\n\t\t\t\t\tonClick={() => toggleCharacteristic(\"chroma\")}\r\n\t\t\t\t>\r\n\t\t\t\t\tChroma\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tactive={isActive(\"hue\")}\r\n\t\t\t\t\tonClick={() => toggleCharacteristic(\"hue\")}\r\n\t\t\t\t>\r\n\t\t\t\t\tHue\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tactive={isActive(\"saturationv\")}\r\n\t\t\t\t\tonClick={() => toggleCharacteristic(\"saturationv\")}\r\n\t\t\t\t>\r\n\t\t\t\t\tSaturation(Value)\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tactive={isActive(\"value\")}\r\n\t\t\t\t\tonClick={() => toggleCharacteristic(\"value\")}\r\n\t\t\t\t>\r\n\t\t\t\t\tValue\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tactive={isActive(\"saturationl\")}\r\n\t\t\t\t\tonClick={() => toggleCharacteristic(\"saturationl\")}\r\n\t\t\t\t>\r\n\t\t\t\t\tSaturation(Luminosity)\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tactive={isActive(\"luminosity\")}\r\n\t\t\t\t\tonClick={() => toggleCharacteristic(\"luminosity\")}\r\n\t\t\t\t>\r\n\t\t\t\t\tLuminosity\r\n\t\t\t\t</Button>\r\n\t\t\t</InnerContainer>\r\n\t\t</OuterContainer>\r\n\t);\r\n};\r\nexport default SortControls;\r\n","import Color from \"color\";\r\n\r\n// Get the difference in a characteristic between two colors\r\nconst getHueDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.hue() - firstColor.hue();\r\nconst getSaturationvDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.saturationv() - firstColor.saturationv();\r\nconst getSaturationlDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.saturationl() - firstColor.saturationl();\r\nconst getValueDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.value() - firstColor.value();\r\nconst getLuminosityDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.luminosity() - firstColor.luminosity();\r\nconst getRedDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.red() - firstColor.red();\r\nconst getGreenDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.green() - firstColor.green();\r\nconst getBlueDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.blue() - firstColor.blue();\r\nconst getCyanDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.cyan() - firstColor.cyan();\r\nconst getMagentaDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.magenta() - firstColor.magenta();\r\nconst getYellowDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.yellow() - firstColor.yellow();\r\nconst getBlackDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.black() - firstColor.black();\r\nconst getContrastDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.contrast(firstColor);\r\nconst getChromaDifference = (firstColor: Color, secondColor: Color) =>\r\n\tsecondColor.chroma() - firstColor.chroma();\r\nconst getDistance = (firstColor: Color, secondColor: Color) =>\r\n\tMath.sqrt(\r\n\t\tMath.pow(secondColor.red() - firstColor.red(), 2) +\r\n\t\t\tMath.pow(secondColor.green() - firstColor.green(), 2) +\r\n\t\t\tMath.pow(secondColor.blue() - firstColor.blue(), 2)\r\n\t);\r\n\r\n// A Dictionary for the color characteristics and the functions to get the difference - also used for type definitions;\r\nconst characteristics = {\r\n\thue: getHueDifference,\r\n\tsaturationv: getSaturationvDifference,\r\n\tsaturationl: getSaturationlDifference,\r\n\tvalue: getValueDifference,\r\n\tluminosity: getLuminosityDifference,\r\n\tred: getRedDifference,\r\n\tgreen: getGreenDifference,\r\n\tblue: getBlueDifference,\r\n\tcyan: getCyanDifference,\r\n\tmagenta: getMagentaDifference,\r\n\tyellow: getYellowDifference,\r\n\tblack: getBlackDifference,\r\n\tcontrast: getContrastDifference,\r\n\tchroma: getChromaDifference,\r\n\tdistance: getDistance,\r\n};\r\n\r\nexport type Characteristic = keyof typeof characteristics;\r\n\r\n// Returns a sort function for two colors based on an optional priority array of characteristics\r\nconst sortColorByPriority = (\r\n\tpriority: Array<Characteristic> = [\"hue\", \"saturationl\", \"luminosity\"]\r\n) => (firstColor: Color, secondColor: Color) => {\r\n\tif (priority.length === 0) {\r\n\t\treturn 0;\r\n\t}\r\n\t// For each characteristic in the sort priority, get the difference and return it if it is not zero otherwise\r\n\t// continue to the next characteristic\r\n\tfor (let index = 0; index < priority.length - 1; index++) {\r\n\t\tconst characteristic = priority[index];\r\n\t\tconst difference = characteristics[characteristic](\r\n\t\t\tfirstColor,\r\n\t\t\tsecondColor\r\n\t\t);\r\n\t\tif (difference !== 0) {\r\n\t\t\treturn difference;\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the difference in the last characteristic whether or not it is equal to zero\r\n\treturn characteristics[priority[priority.length - 1]](\r\n\t\tfirstColor,\r\n\t\tsecondColor\r\n\t);\r\n};\r\n\r\nexport default sortColorByPriority;\r\n","import Color from \"color\";\r\nimport { flatten, chunk } from \"lodash\";\r\n\r\nimport sortColorByPriority, { Characteristic } from \"./sort-color-by-priority\";\r\n\r\nconst sortColorGrid = (\r\n\tvalues: Array<Color>,\r\n\tsortFull: Array<Characteristic>,\r\n\tsortRows: Array<Characteristic>,\r\n\tsortColumns: Array<Characteristic>,\r\n\tcallback: (arg: Array<Color>) => void\r\n) => {\r\n\t// First sort all colours in the image\r\n\tconst sortedValues = values.sort(sortColorByPriority(sortFull));\r\n\r\n\t// Then sort the colours in each row\r\n\tconst rowSize = 256;\r\n\tconst rows = chunk(sortedValues, rowSize);\r\n\tconst sortedRows = rows.map((row) =>\r\n\t\trow.sort(sortColorByPriority(sortRows))\r\n\t);\r\n\r\n\t// Finally sort the colours in each column\r\n\tlet columns = [];\r\n\tfor (let index = 0; index < rowSize; index++) {\r\n\t\tcolumns[index] = sortedRows.map((row) => row[index]);\r\n\t}\r\n\tconst sortedColumns = columns.map((column) =>\r\n\t\tcolumn.sort(sortColorByPriority(sortColumns))\r\n\t);\r\n\tlet final: Array<Array<Color>> = [];\r\n\tfor (let index = 0; index < rows.length; index++) {\r\n\t\tfinal[index] = sortedColumns.map((column) => column[index]);\r\n\t}\r\n\tcallback(flatten(final));\r\n};\r\n\r\nexport default sortColorGrid;\r\n","import Color from \"color\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Characteristic } from \"../library/sorting/sort-color-by-priority\";\r\nimport sortColorGrid from \"../library/sorting/sort-color-grid\";\r\n\r\n// returns an array of colors sorted by the given priority\r\nconst useSorting = (\r\n\tvalues: Array<Color>,\r\n\tsortFull: Array<Characteristic>,\r\n\tsortRows: Array<Characteristic>,\r\n\tsortColumns: Array<Characteristic>\r\n) => {\r\n\tconst [sortedColors, setSortedColors] = useState(values);\r\n\tuseEffect(() => {\r\n\t\tlet timer = setTimeout(\r\n\t\t\t() =>\r\n\t\t\t\tsortColorGrid(\r\n\t\t\t\t\tvalues,\r\n\t\t\t\t\tsortFull,\r\n\t\t\t\t\tsortRows,\r\n\t\t\t\t\tsortColumns,\r\n\t\t\t\t\tsetSortedColors\r\n\t\t\t\t),\r\n\t\t\t500\r\n\t\t);\r\n\t\treturn () => clearTimeout(timer);\r\n\t}, [\r\n\t\tJSON.stringify(values),\r\n\t\tJSON.stringify(sortFull),\r\n\t\tJSON.stringify(sortRows),\r\n\t\tJSON.stringify(sortColumns),\r\n\t]);\r\n\r\n\treturn sortedColors;\r\n};\r\n\r\nexport default useSorting;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Color from \"color\";\r\n\r\nimport Image from \"./image\";\r\nimport SortControls from \"./sort-controls\";\r\nimport { Characteristic } from \"../library/sorting/sort-color-by-priority\";\r\nimport useSorting from \"../hooks/use-sorting\";\r\n\r\nconst Container = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n`;\r\n\r\nconst ImageContainer = () => {\r\n\tconst values = [];\r\n\tfor (let redIndex = 32; redIndex > 0; redIndex--) {\r\n\t\tfor (let greenIndex = 32; greenIndex > 0; greenIndex--) {\r\n\t\t\tfor (let blueIndex = 32; blueIndex > 0; blueIndex--) {\r\n\t\t\t\tvalues.push(\r\n\t\t\t\t\tColor.rgb(redIndex * 8, greenIndex * 8, blueIndex * 8)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst [sortFull, setSortFull] = useState<Array<Characteristic>>([\r\n\t\t\"luminosity\",\r\n\t]);\r\n\tconst [sortRows, setSortRows] = useState<Array<Characteristic>>([\"hue\"]);\r\n\tconst [sortColumns, setSortColumns] = useState<Array<Characteristic>>([]);\r\n\tconst sortedColors = useSorting(values, sortFull, sortRows, sortColumns);\r\n\r\n\tconst toggleSort = (\r\n\t\tsortPriority: Array<Characteristic>,\r\n\t\tupdateSort: React.Dispatch<React.SetStateAction<Array<Characteristic>>>\r\n\t) => (characteristic: Characteristic) => {\r\n\t\tif (sortPriority.some((value) => value === characteristic)) {\r\n\t\t\treturn updateSort(\r\n\t\t\t\tsortPriority.filter((value) => value !== characteristic)\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn updateSort([characteristic]);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Image colors={sortedColors} />\r\n\t\t\t<p>\r\n\t\t\t\tUse the controls to sort the colours by different\r\n\t\t\t\tcharacteristics\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tSorting is applied to the whole image first, then each row, and\r\n\t\t\t\tfinally each column\r\n\t\t\t</p>\r\n\t\t\t<SortControls\r\n\t\t\t\ttitle=\"Sort all colors\"\r\n\t\t\t\tsortPriority={sortFull}\r\n\t\t\t\ttoggleCharacteristic={toggleSort(sortFull, setSortFull)}\r\n\t\t\t/>\r\n\t\t\t<SortControls\r\n\t\t\t\ttitle=\"Sort each row\"\r\n\t\t\t\tsortPriority={sortRows}\r\n\t\t\t\ttoggleCharacteristic={toggleSort(sortRows, setSortRows)}\r\n\t\t\t/>\r\n\t\t\t<SortControls\r\n\t\t\t\ttitle=\"Sort each column\"\r\n\t\t\t\tsortPriority={sortColumns}\r\n\t\t\t\ttoggleCharacteristic={toggleSort(sortColumns, setSortColumns)}\r\n\t\t\t/>\r\n\t\t</Container>\r\n\t);\r\n};\r\nexport default ImageContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Title from \"./title\";\r\n\r\nconst Container = styled.header`\r\n\tbackground-color: #ebebeb;\r\n\tgrid-area: header;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n`;\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Title>EHG Code Test</Title>\r\n\t\t</Container>\r\n\t);\r\n};\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nconst Content = styled.main`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tgrid-area: main;\r\n\talign-items: center;\r\n\tpadding: 20px;\r\n`;\r\n\r\nexport default Content;\r\n","import styled from \"styled-components\";\r\n\r\nconst Footer = styled.footer`\r\n\tbackground-color: #282828;\r\n\tgrid-area: footer;\r\n`;\r\n\r\nexport default Footer;\r\n","import React, { ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Header from \"./header\";\r\nimport Content from \"./content\";\r\nimport Footer from \"./footer\";\r\n\r\nconst Container = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 1fr minmax(200px, 500px) minmax(200px, 500px) 1fr;\r\n\tgrid-template-rows: 100px 1fr 200px;\r\n\tgrid-template-areas:\r\n\t\t\"header header header header\"\r\n\t\t\"marginleft main main marginright\"\r\n\t\t\"footer footer footer footer\";\r\n\twidth: 100%;\r\n\theight: 100%;\r\n`;\r\n\r\ninterface LayoutProps {\r\n\tchildren?: ReactNode;\r\n}\r\n\r\nconst Layout = ({ children }: LayoutProps) => {\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Header />\r\n\t\t\t<Content>{children}</Content>\r\n\t\t\t<Footer />\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\nimport ImageContainer from './components/image-container';\r\nimport Layout from './components/layout';\r\n\r\nconst Application = () => {\r\n    return <Layout>\r\n        <ImageContainer />\r\n    </Layout>\r\n}\r\n\r\nexport default Application;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Application from './application';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Application />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}